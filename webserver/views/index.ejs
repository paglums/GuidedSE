<!DOCTYPE html>
<html>
	<head>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.1/d3.min.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script type="text/javascript" src="../scripts/tooltip.js"></script>		
    <style>
    .codecontainer {
    	position: relative;
    	width: 100%;
	}
    .codefile {
    	position: absolute;
    	right: 0px;
    	width: 500px;
    	height: 700px;
    	background: rgba(68,136,187,0.5);
    	overflow:scroll;
    }
    #codedata {
    	white-space: pre;
    }
    .menu {
    position: absolute;
    left: 200px;
    top: 200px;
    background-color:rgba(68,136,187,0.5);
    width: 500px;
    border: 1px #ccc solid;
    border-radius: 6px;
    box-shadow: #333 2px 2px 4px;
    padding: 8px;
    font-family: arial, helvetica, sans-serif;
	}
    .container {
        width: 500px;
        margin: 0 auto;
    }
    .progress_outer {
        border: 1px solid #000;
    }
    .progress {
        width: 20%;
        background: rgba(68,136,187,0.5);
        height: 20px;  
    }
    .tooltip{ background-color:rgba(68,136,187,0.5);
        margin: 10px;
        height: 200px;
        width: 450px;
        padding-left: 10px; 
        padding-top: 10px;
    	-webkit-border-radius:10px;
    	-moz-border-radius:10px;
    	border-radius:10px;
    }
    .node {
      cursor: pointer;
    }
    .node circle {
      fill: #fff;
      stroke: steelblue;
      stroke-width: 3px;
    }
    .node text {
      font: 12px sans-serif;
    }
    .link {
      fill: none;
      stroke: #ccc;
      stroke-width: 2px;
    }
    </style>
  </head>
	

  <body>
		<h1>Framework for Symbolic Execution of LLVM Bitcode</h1>
		<h2>Symbolic Map</h2>
    	<div class='container'>
        	<p>
            	Select Your Code File: <input type='file' id='_file'> <input type='button' id='_submit' value='Upload!'>
        	</p>
        	<div class='progress_outer'>
            	<div id='_progress' class='progress'></div>
        	</div>
    	</div>
    	<button id="Step" onclick="getNext()">Begin Symbolic Execution</button>
		<div id="graph"></div>
		<div class="codecontainer">
			<div class="codefile">
				<p><b>Code:</b></p>
				<p id="codedata"><pre></pre></p>
			</div>
		</div>	
   </body>



  <script>
    var margin = {top: 20, right: 120, bottom: 20, left: 120},
    width = 960 - margin.right - margin.left,
    height = 500 - margin.top - margin.bottom;
    var i = 0,
    duration = 750,
    root;
    var tree = d3.layout.tree()
    .size([height, width]);
    var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.x, d.y]; });
    var svg = d3.select("body").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    var treeData = [];
    var numSteps, branchSelected, explore;
    var contextMenuShowing = false;
    function update(source) {
      // Compute the new tree layout.
      var nodes = tree.nodes(root).reverse(),
      links = tree.links(nodes);

      // Normalize for fixed-depth.
      nodes.forEach(function(d) { d.y = d.depth * 100; });

      // Update the nodes…
      var node = svg.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

      // Enter any new nodes at the parent's previous position.
      var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .on("click", click);

      nodeEnter.append("circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d.children ? "lightsteelblue" : "#fff"; })
      .call(d3.helper.tooltip(
        function(d, i){
          return d.text + " \n<b>Constraint: </b> \n" + d.constraints;
        }
        ))
      .on('contextmenu', function(d, i){
/*      	d3.event.preventDefault();
    	if (contextMenuShowing) {
        	d3.select(".menu").remove();
    	} 
    	else*/
    		menu = d3.select("body")
    		.append("div")
            .attr("class", "menu")
            .style("left", "300px")
            .style("top", "500px");
            menu.html(
            "<form id='menuoptions' onsubmit='return handleMenuOptions()'>" + 
  				"Number of steps to explore:<br>" +
  				"<input type='text' name='steps'>" +
  				"<br>" +
  				"<p>Explore by: </p>" + 
  				"<input type='radio' name='explore' value='BFS'> BFS" +
  				"<br>" +
  				"<input type='radio' name='explore' value='DFS'> DFS" +
  				"<br>" + 
  				"<p>Select Branch</p>" +
  				"<input type='radio' name='branch' value='left'> Left" +
  				"<br>" +
  				"<input type='radio' name='branch' value='right'> Right" +
  				"<br><br>" +
  				"<input type='submit' value='Submit'>" +
			"</form>");
            contextMenuShowing = true;
      });

      nodeEnter.append("text")
      .attr("y", function(d) { return d.children ? -18 : 18; })
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .text(function(d) { return d.node; })
      .style("fill-opacity", 1e-6);



  // Transition nodes to their new position.
      var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

      nodeUpdate.select("circle")
      .attr("r", 10)
      .style("fill", function(d) { return d.children ? "lightsteelblue" : "#fff"; });

      nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
      var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

      nodeExit.select("circle")
      .attr("r", 1e-6);

      nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
      var link = svg.selectAll("path.link")
      .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
      link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
      var o = {x: source.x0, y: source.y0};
      return diagonal({source: o, target: o});
      });

  // Transition links to their new position.
      link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
      link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
      var o = {x: source.x, y: source.y};
      return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
      nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
      });
}

    function updateGraph()
    {
      root = treeData[0]
      root.x0 = height / 2;
      root.y0 = 0;
      update(root);

      d3.select(self.frameElement).style("height", "500px");
    }


    //var requestString = "isBFS=" + explore + "&branch=" + branch + "&steps=" + numSteps + "&prevID=" + nodeID;
    var stepsPerformed = 0;
    function getNextContext(nodeID)
    {

	    	$.get('next', {isBFS: explore, branch: branch, steps: numSteps, prevID: nodeID}, function(data)
	    	{
	    	  nodeObj = JSON.parse(data);  
	    	  if(!nodeObj.updated && stepsPerformed <= steps)
	          {
	            setTimeout(getNextContext(nodeID), 1000);
	            stepsPerformed = stepsPerformed + 1;
	          }
	          else
	          {
	          	console.log("fin = " + nodeObj.fin);
	          	if(nodeObj.fin !== "0")	
	            {  //document.getElementById("Step").disabled = true;
	          	}
	          	else
	          	{
		            var node = {"node": nodeObj.node, "text": nodeObj["text"], "parent": nodeObj["parent"], "children": [], "constraints": nodeObj["constraints"]};
		            treeData.push(node);
		            for (var j = 0; j < treeData.length; j++)
		            {
		              console.log("before");
		              console.log(treeData[j]);
		              if (treeData[j].node == node["parent"])
		              {
		                if(treeData[j].children)
		                  treeData[j].children.push(node);
		                else treeData[j].children = [node];
		              }
		              console.log("after");
		              console.log(treeData[j]);
		            }
		            updateGraph();
		        }
		      }

	    	});
	}
    
    function getNext()
    {
      var request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        if (request.readyState == 4 && request.status == 200) {
          console.log(request.response);
          var nodeObj = JSON.parse(request.response);

          if(!nodeObj.updated)
          {
            setTimeout(getNext, 1000);
          }
          else
          {
          	console.log("fin = " + nodeObj.fin);
          	if(nodeObj.fin !== "0")	
              document.getElementById("Step").disabled = true;
          	else
          	{
	            var node = {"node": nodeObj.node, "text": nodeObj["text"], "parent": nodeObj["parent"], "children": [], "constraints": nodeObj["constraints"]};
	            treeData.push(node);
	            for (var j = 0; j < treeData.length; j++)
	            {
	              console.log("before");
	              console.log(treeData[j]);
	              if (treeData[j].node == node["parent"])
	              {
	                if(treeData[j].children)
	                  treeData[j].children.push(node);
	                else treeData[j].children = [node];
	              }
	              console.log("after");
	              console.log(treeData[j]);
	            }
	            updateGraph();
	          }
	      }
        }
      }

      request.open("GET", "next", true);
      request.send();     
    }
// Toggle children on click.
    function click(d) {
/*      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }*/
      //----------------//
      //update(d);
      //----------------//
      getNext(d.id);
    }


    function handleMenuOptions()
    {
    	try
    	{
    		var _explore = document.getElementById('menuoptions');
    		numSteps = _explore.elements.namedItem('steps').value;
    		branchSelected = _explore.elements.namedItem('branch').value;
    		explore = _explore.elements.namedItem('explore').value;
    		console.log(numSteps);
    		console.log(branchSelected);
    		console.log(explore);
    		d3.select('.menu').remove();
    	}
    	catch(e){
    		console.log(e);
    		console.log('inside loser catch');
    	}
    	return false;
    }


    var _submit = document.getElementById('_submit'), 
    _file = document.getElementById('_file'), 
    _progress = document.getElementById('_progress'); 
    var data = new FormData();
   	function loaded(evt) {
    	var fileString = evt.target.result.replace(/\r/g, "\n");
    	var splitted = fileString.split("\n");

    	for (var i = 1; i <= splitted.length; i++)
    	{
    		$("#codedata").append('<p>'+ i + ". " + splitted[i] + '</p>');	
    	}
    	
	}
    var upload = function(){

      if(_file.files.length === 0){
          return;
      }

      data.append('SelectedFile', _file.files[0]);

      var request = new XMLHttpRequest();
      request.onreadystatechange = function(){
          if(request.readyState == 4){
              try {
                  var resp = JSON.parse(request.response);
              } catch (e){
                  var resp = {
                      status: 'error',
                      data: 'Unknown error occurred: [' + request.responseText + ']'
                  };
              }
              console.log(resp.status + ': ' + resp.data);
          }
      };

      request.upload.addEventListener('progress', function(e){
          _progress.style.width = Math.ceil(e.loaded/e.total) * 100 + '%';
      }, false);

      request.open('POST', 'upload');
      request.send(data);
      var reader = new FileReader();
      reader.readAsBinaryString(_file.files[0]);
	  reader.onload = loaded;
    }
    _submit.addEventListener('click', upload);
  </script>

</html>
