GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./sfse...done.
(gdb) run
Starting program: /media/ACER/Users/Shalan/Dropbox/SHALAN/dev/lums/Sproj/sfse 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
how many key vall pairs you want? : Enter a Key : Enter a Value : Enter a Key : Enter a Value : Enter a Key : Enter a Value : Enter a Key : Enter a Value : prevId : -1
isBFS : 0
branch : 0
steps : -1
proceed? : 
1: size of deque : 1
2: size of deque : 0
Basic block (name= ) has 11 instructions
hasNext == 1
InstructionPtr now at   %2 = alloca i32, align 4
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %1 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %1 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------
executing Allocate 
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %x = alloca i32, align 4
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %2 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %2 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------
executing Allocate 
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %a, i32* %1, align 4
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %x = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %x = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------
executing Allocate 
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80
printing operands : 2
operand # : 1 : i32 %a
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %a, i32* %1, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %a, i32* %1, align 4

 executing :store instruction 
State at this point == 
------------------
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %b, i32* %2, align 4
printing operands : 3
operand # : 1 : !{i32* %1}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"a", metadata <badref>, i32 16777234, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [a] [line 18]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80	Line Number == 18
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80

 executing :call instruction 
State at this point == 
------------------
 variable name : -- a

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82
printing operands : 2
operand # : 1 : i32 %b
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %b, i32* %2, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %b, i32* %2, align 4

 executing :store instruction 
State at this point == 
------------------a	 = 	i32 %a

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %3 = load i32* %1, align 4, !dbg !83
printing operands : 3
operand # : 1 : !{i32* %2}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"b", metadata <badref>, i32 33554450, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [b] [line 18]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82	Line Number == 18
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82

 executing :call instruction 
State at this point == 
------------------a	 = 	i32 %a

 variable name : -- b

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %4 = load i32* %2, align 4, !dbg !83
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %3 = load i32* %1, align 4, !dbg !83
getOpcode: 27
instruction ==   %3 = load i32* %1, align 4, !dbg !83	Line Number == 20
non branch instruction to b executed
  %3 = load i32* %1, align 4, !dbg !83

 executing :load instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %5 = icmp sgt i32 %3, %4, !dbg !83
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %4 = load i32* %2, align 4, !dbg !83
getOpcode: 27
instruction ==   %4 = load i32* %2, align 4, !dbg !83	Line Number == 20
non branch instruction to b executed
  %4 = load i32* %2, align 4, !dbg !83

 executing :load instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br i1 %5, label %6, label %21, !dbg !83
printing operands : 2
operand # : 1 :   %3 = load i32* %1, align 4, !dbg !83
operand # : 2 :   %4 = load i32* %2, align 4, !dbg !83
printing instruction:   %5 = icmp sgt i32 %3, %4, !dbg !83
getOpcode: 46
instruction ==   %5 = icmp sgt i32 %3, %4, !dbg !83	Line Number == 20
non branch instruction to b executed
  %5 = icmp sgt i32 %3, %4, !dbg !83

 executing :icmp instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b

operand0 ==   %3 = load i32* %1, align 4, !dbg !83
operand1 ==   %4 = load i32* %2, align 4, !dbg !83
lhs == i32 %a
rhs == i32 %b
state updated
exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 3
operand # : 1 :   %5 = icmp sgt i32 %3, %4, !dbg !83
operand # : 2 : 
; <label>:21                                      ; preds = %0
  call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !92), !dbg !94
  store i32 3, i32* %x, align 4, !dbg !95
  br label %22, !dbg !96

operand # : 3 : 
; <label>:6                                       ; preds = %0
  %7 = load i32* %1, align 4, !dbg !85
  %8 = add nsw i32 %7, 1, !dbg !85
  %9 = load i32* %2, align 4, !dbg !85
  %10 = icmp sgt i32 %8, %9, !dbg !85
  br i1 %10, label %11, label %14, !dbg !85

printing instruction:   br i1 %5, label %6, label %21, !dbg !83
getOpcode: 2
instruction ==   br i1 %5, label %6, label %21, !dbg !83	Line Number == 20
Split Point Hit!
ADDING CONDITION : (i32 %a>i32 %b)
exiting getNextBlocks
number of blocks :  2
left child done!!
right child NULL!!
right child done!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 3 instructions
hasNext == 1
InstructionPtr now at   store i32 3, i32* %x, align 4, !dbg !95
printing operands : 3
operand # : 1 : !{i32* %x}

operand # : 2 : !{i32 786688, metadata <badref>, metadata !"x", metadata <badref>, i32 32, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [x] [line 32]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !92), !dbg !94
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !92), !dbg !94	Line Number == 32
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !92), !dbg !94

 executing :call instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b

 variable name : -- x

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br label %22, !dbg !96
printing operands : 2
operand # : 1 : i32 3
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 3, i32* %x, align 4, !dbg !95
getOpcode: 28
instruction ==   store i32 3, i32* %x, align 4, !dbg !95	Line Number == 32
non branch instruction to b executed
  store i32 3, i32* %x, align 4, !dbg !95

 executing :store instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b
x	 = 	  %x = alloca i32, align 4

exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 1
operand # : 1 : 
; <label>:22                                      ; preds = %25, %21
  %23 = load i32* %x, align 4, !dbg !97
  %24 = icmp sgt i32 %23, 0, !dbg !97
  br i1 %24, label %25, label %30, !dbg !97

printing instruction:   br label %22, !dbg !96
getOpcode: 2
instruction ==   br label %22, !dbg !96	Line Number == 33
Split Point Hit!
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 3 instructions
hasNext == 1
InstructionPtr now at   %24 = icmp sgt i32 %23, 0, !dbg !97
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %23 = load i32* %x, align 4, !dbg !97
getOpcode: 27
instruction ==   %23 = load i32* %x, align 4, !dbg !97	Line Number == 33
non branch instruction to b executed
  %23 = load i32* %x, align 4, !dbg !97

 executing :load instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b
x	 = 	i32 3

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br i1 %24, label %25, label %30, !dbg !97
printing operands : 2
operand # : 1 :   %23 = load i32* %x, align 4, !dbg !97
operand # : 2 : i32 0
printing instruction:   %24 = icmp sgt i32 %23, 0, !dbg !97
getOpcode: 46
instruction ==   %24 = icmp sgt i32 %23, 0, !dbg !97	Line Number == 33
non branch instruction to b executed
  %24 = icmp sgt i32 %23, 0, !dbg !97

 executing :icmp instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b
x	 = 	i32 3

operand0 ==   %23 = load i32* %x, align 4, !dbg !97
operand1 == i32 0
lhs == i32 3
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 3
operand # : 1 :   %24 = icmp sgt i32 %23, 0, !dbg !97
operand # : 2 : 
; <label>:30                                      ; preds = %22
  %31 = load i32* %2, align 4, !dbg !103
  %32 = add nsw i32 %31, 2, !dbg !103
  store i32 %32, i32* %2, align 4, !dbg !103
  br label %33

operand # : 3 : 
; <label>:25                                      ; preds = %22
  %26 = load i32* %1, align 4, !dbg !99
  %27 = add nsw i32 %26, 1, !dbg !99
  store i32 %27, i32* %1, align 4, !dbg !99
  %28 = load i32* %x, align 4, !dbg !101
  %29 = add nsw i32 %28, -1, !dbg !101
  store i32 %29, i32* %x, align 4, !dbg !101
  br label %22, !dbg !102

printing instruction:   br i1 %24, label %25, label %30, !dbg !97
getOpcode: 2
instruction ==   br i1 %24, label %25, label %30, !dbg !97	Line Number == 33
Split Point Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 7 instructions
hasNext == 1
InstructionPtr now at   %27 = add nsw i32 %26, 1, !dbg !99
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %26 = load i32* %1, align 4, !dbg !99
getOpcode: 27
instruction ==   %26 = load i32* %1, align 4, !dbg !99	Line Number == 35
non branch instruction to b executed
  %26 = load i32* %1, align 4, !dbg !99

 executing :load instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b
x	 = 	i32 3

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %27, i32* %1, align 4, !dbg !99
printing operands : 2
operand # : 1 :   %26 = load i32* %1, align 4, !dbg !99
operand # : 2 : i32 1
printing instruction:   %27 = add nsw i32 %26, 1, !dbg !99
getOpcode: 8
instruction ==   %27 = add nsw i32 %26, 1, !dbg !99	Line Number == 35
non branch instruction to b executed
  %27 = add nsw i32 %26, 1, !dbg !99

 executing :add instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b
x	 = 	i32 3

lhs not NULL
rhs not NULL
lhs: i32 %a
rhs: i32 1
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %28 = load i32* %x, align 4, !dbg !101
printing operands : 2
operand # : 1 :   %27 = add nsw i32 %26, 1, !dbg !99
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %27, i32* %1, align 4, !dbg !99
getOpcode: 28
instruction ==   store i32 %27, i32* %1, align 4, !dbg !99	Line Number == 35
non branch instruction to b executed
  store i32 %27, i32* %1, align 4, !dbg !99

 executing :store instruction 
State at this point == 
------------------a	 = 	i32 %a
b	 = 	i32 %b
x	 = 	i32 3

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %29 = add nsw i32 %28, -1, !dbg !101
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %28 = load i32* %x, align 4, !dbg !101
getOpcode: 27
instruction ==   %28 = load i32* %x, align 4, !dbg !101	Line Number == 36
non branch instruction to b executed
  %28 = load i32* %x, align 4, !dbg !101

 executing :load instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 3

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %29, i32* %x, align 4, !dbg !101
printing operands : 2
operand # : 1 :   %28 = load i32* %x, align 4, !dbg !101
operand # : 2 : i32 -1
printing instruction:   %29 = add nsw i32 %28, -1, !dbg !101
getOpcode: 8
instruction ==   %29 = add nsw i32 %28, -1, !dbg !101	Line Number == 36
non branch instruction to b executed
  %29 = add nsw i32 %28, -1, !dbg !101

 executing :add instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 3

lhs not NULL
rhs not NULL
lhs: i32 3
rhs: i32 -1
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br label %22, !dbg !102
printing operands : 2
operand # : 1 :   %29 = add nsw i32 %28, -1, !dbg !101
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %29, i32* %x, align 4, !dbg !101
getOpcode: 28
instruction ==   store i32 %29, i32* %x, align 4, !dbg !101	Line Number == 36
non branch instruction to b executed
  store i32 %29, i32* %x, align 4, !dbg !101

 executing :store instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 3

exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 1
operand # : 1 : 
; <label>:22                                      ; preds = %25, %21
  %23 = load i32* %x, align 4, !dbg !97
  %24 = icmp sgt i32 %23, 0, !dbg !97
  br i1 %24, label %25, label %30, !dbg !97

printing instruction:   br label %22, !dbg !102
getOpcode: 2
instruction ==   br label %22, !dbg !102	Line Number == 37
Split Point Hit!
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 3 instructions
hasNext == 1
InstructionPtr now at   %24 = icmp sgt i32 %23, 0, !dbg !97
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %23 = load i32* %x, align 4, !dbg !97
getOpcode: 27
instruction ==   %23 = load i32* %x, align 4, !dbg !97	Line Number == 33
non branch instruction to b executed
  %23 = load i32* %x, align 4, !dbg !97

 executing :load instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br i1 %24, label %25, label %30, !dbg !97
printing operands : 2
operand # : 1 :   %23 = load i32* %x, align 4, !dbg !97
operand # : 2 : i32 0
printing instruction:   %24 = icmp sgt i32 %23, 0, !dbg !97
getOpcode: 46
instruction ==   %24 = icmp sgt i32 %23, 0, !dbg !97	Line Number == 33
non branch instruction to b executed
  %24 = icmp sgt i32 %23, 0, !dbg !97

 executing :icmp instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

operand0 ==   %23 = load i32* %x, align 4, !dbg !97
operand1 == i32 0
lhs == i32 2
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 3
operand # : 1 :   %24 = icmp sgt i32 %23, 0, !dbg !97
operand # : 2 : 
; <label>:30                                      ; preds = %22
  %31 = load i32* %2, align 4, !dbg !103
  %32 = add nsw i32 %31, 2, !dbg !103
  store i32 %32, i32* %2, align 4, !dbg !103
  br label %33

operand # : 3 : 
; <label>:25                                      ; preds = %22
  %26 = load i32* %1, align 4, !dbg !99
  %27 = add nsw i32 %26, 1, !dbg !99
  store i32 %27, i32* %1, align 4, !dbg !99
  %28 = load i32* %x, align 4, !dbg !101
  %29 = add nsw i32 %28, -1, !dbg !101
  store i32 %29, i32* %x, align 4, !dbg !101
  br label %22, !dbg !102

printing instruction:   br i1 %24, label %25, label %30, !dbg !97
getOpcode: 2
instruction ==   br i1 %24, label %25, label %30, !dbg !97	Line Number == 33
Split Point Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 7 instructions
hasNext == 1
InstructionPtr now at   %27 = add nsw i32 %26, 1, !dbg !99
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %26 = load i32* %1, align 4, !dbg !99
getOpcode: 27
instruction ==   %26 = load i32* %1, align 4, !dbg !99	Line Number == 35
non branch instruction to b executed
  %26 = load i32* %1, align 4, !dbg !99

 executing :load instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %27, i32* %1, align 4, !dbg !99
printing operands : 2
operand # : 1 :   %26 = load i32* %1, align 4, !dbg !99
operand # : 2 : i32 1
printing instruction:   %27 = add nsw i32 %26, 1, !dbg !99
getOpcode: 8
instruction ==   %27 = add nsw i32 %26, 1, !dbg !99	Line Number == 35
non branch instruction to b executed
  %27 = add nsw i32 %26, 1, !dbg !99

 executing :add instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

lhs not NULL
rhs not NULL
lhs: (i32 %a+i32 1)
rhs: i32 1
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %28 = load i32* %x, align 4, !dbg !101
printing operands : 2
operand # : 1 :   %27 = add nsw i32 %26, 1, !dbg !99
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %27, i32* %1, align 4, !dbg !99
getOpcode: 28
instruction ==   store i32 %27, i32* %1, align 4, !dbg !99	Line Number == 35
non branch instruction to b executed
  store i32 %27, i32* %1, align 4, !dbg !99

 executing :store instruction 
State at this point == 
------------------a	 = 	(i32 %a+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %29 = add nsw i32 %28, -1, !dbg !101
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %28 = load i32* %x, align 4, !dbg !101
getOpcode: 27
instruction ==   %28 = load i32* %x, align 4, !dbg !101	Line Number == 36
non branch instruction to b executed
  %28 = load i32* %x, align 4, !dbg !101

 executing :load instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %29, i32* %x, align 4, !dbg !101
printing operands : 2
operand # : 1 :   %28 = load i32* %x, align 4, !dbg !101
operand # : 2 : i32 -1
printing instruction:   %29 = add nsw i32 %28, -1, !dbg !101
getOpcode: 8
instruction ==   %29 = add nsw i32 %28, -1, !dbg !101	Line Number == 36
non branch instruction to b executed
  %29 = add nsw i32 %28, -1, !dbg !101

 executing :add instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

lhs not NULL
rhs not NULL
lhs: i32 2
rhs: i32 -1
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br label %22, !dbg !102
printing operands : 2
operand # : 1 :   %29 = add nsw i32 %28, -1, !dbg !101
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %29, i32* %x, align 4, !dbg !101
getOpcode: 28
instruction ==   store i32 %29, i32* %x, align 4, !dbg !101	Line Number == 36
non branch instruction to b executed
  store i32 %29, i32* %x, align 4, !dbg !101

 executing :store instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 2

exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 1
operand # : 1 : 
; <label>:22                                      ; preds = %25, %21
  %23 = load i32* %x, align 4, !dbg !97
  %24 = icmp sgt i32 %23, 0, !dbg !97
  br i1 %24, label %25, label %30, !dbg !97

printing instruction:   br label %22, !dbg !102
getOpcode: 2
instruction ==   br label %22, !dbg !102	Line Number == 37
Split Point Hit!
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 3 instructions
hasNext == 1
InstructionPtr now at   %24 = icmp sgt i32 %23, 0, !dbg !97
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %23 = load i32* %x, align 4, !dbg !97
getOpcode: 27
instruction ==   %23 = load i32* %x, align 4, !dbg !97	Line Number == 33
non branch instruction to b executed
  %23 = load i32* %x, align 4, !dbg !97

 executing :load instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br i1 %24, label %25, label %30, !dbg !97
printing operands : 2
operand # : 1 :   %23 = load i32* %x, align 4, !dbg !97
operand # : 2 : i32 0
printing instruction:   %24 = icmp sgt i32 %23, 0, !dbg !97
getOpcode: 46
instruction ==   %24 = icmp sgt i32 %23, 0, !dbg !97	Line Number == 33
non branch instruction to b executed
  %24 = icmp sgt i32 %23, 0, !dbg !97

 executing :icmp instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

operand0 ==   %23 = load i32* %x, align 4, !dbg !97
operand1 == i32 0
lhs == i32 1
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 3
operand # : 1 :   %24 = icmp sgt i32 %23, 0, !dbg !97
operand # : 2 : 
; <label>:30                                      ; preds = %22
  %31 = load i32* %2, align 4, !dbg !103
  %32 = add nsw i32 %31, 2, !dbg !103
  store i32 %32, i32* %2, align 4, !dbg !103
  br label %33

operand # : 3 : 
; <label>:25                                      ; preds = %22
  %26 = load i32* %1, align 4, !dbg !99
  %27 = add nsw i32 %26, 1, !dbg !99
  store i32 %27, i32* %1, align 4, !dbg !99
  %28 = load i32* %x, align 4, !dbg !101
  %29 = add nsw i32 %28, -1, !dbg !101
  store i32 %29, i32* %x, align 4, !dbg !101
  br label %22, !dbg !102

printing instruction:   br i1 %24, label %25, label %30, !dbg !97
getOpcode: 2
instruction ==   br i1 %24, label %25, label %30, !dbg !97	Line Number == 33
Split Point Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 7 instructions
hasNext == 1
InstructionPtr now at   %27 = add nsw i32 %26, 1, !dbg !99
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %26 = load i32* %1, align 4, !dbg !99
getOpcode: 27
instruction ==   %26 = load i32* %1, align 4, !dbg !99	Line Number == 35
non branch instruction to b executed
  %26 = load i32* %1, align 4, !dbg !99

 executing :load instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %27, i32* %1, align 4, !dbg !99
printing operands : 2
operand # : 1 :   %26 = load i32* %1, align 4, !dbg !99
operand # : 2 : i32 1
printing instruction:   %27 = add nsw i32 %26, 1, !dbg !99
getOpcode: 8
instruction ==   %27 = add nsw i32 %26, 1, !dbg !99	Line Number == 35
non branch instruction to b executed
  %27 = add nsw i32 %26, 1, !dbg !99

 executing :add instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

lhs not NULL
rhs not NULL
lhs: ((i32 %a+i32 1)+i32 1)
rhs: i32 1
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %28 = load i32* %x, align 4, !dbg !101
printing operands : 2
operand # : 1 :   %27 = add nsw i32 %26, 1, !dbg !99
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %27, i32* %1, align 4, !dbg !99
getOpcode: 28
instruction ==   store i32 %27, i32* %1, align 4, !dbg !99	Line Number == 35
non branch instruction to b executed
  store i32 %27, i32* %1, align 4, !dbg !99

 executing :store instruction 
State at this point == 
------------------a	 = 	((i32 %a+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   %29 = add nsw i32 %28, -1, !dbg !101
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %28 = load i32* %x, align 4, !dbg !101
getOpcode: 27
instruction ==   %28 = load i32* %x, align 4, !dbg !101	Line Number == 36
non branch instruction to b executed
  %28 = load i32* %x, align 4, !dbg !101

 executing :load instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %29, i32* %x, align 4, !dbg !101
printing operands : 2
operand # : 1 :   %28 = load i32* %x, align 4, !dbg !101
operand # : 2 : i32 -1
printing instruction:   %29 = add nsw i32 %28, -1, !dbg !101
getOpcode: 8
instruction ==   %29 = add nsw i32 %28, -1, !dbg !101	Line Number == 36
non branch instruction to b executed
  %29 = add nsw i32 %28, -1, !dbg !101

 executing :add instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

lhs not NULL
rhs not NULL
lhs: i32 1
rhs: i32 -1
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br label %22, !dbg !102
printing operands : 2
operand # : 1 :   %29 = add nsw i32 %28, -1, !dbg !101
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %29, i32* %x, align 4, !dbg !101
getOpcode: 28
instruction ==   store i32 %29, i32* %x, align 4, !dbg !101	Line Number == 36
non branch instruction to b executed
  store i32 %29, i32* %x, align 4, !dbg !101

 executing :store instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 1

exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 1
operand # : 1 : 
; <label>:22                                      ; preds = %25, %21
  %23 = load i32* %x, align 4, !dbg !97
  %24 = icmp sgt i32 %23, 0, !dbg !97
  br i1 %24, label %25, label %30, !dbg !97

printing instruction:   br label %22, !dbg !102
getOpcode: 2
instruction ==   br label %22, !dbg !102	Line Number == 37
Split Point Hit!
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 3 instructions
hasNext == 1
InstructionPtr now at   %24 = icmp sgt i32 %23, 0, !dbg !97
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %23 = load i32* %x, align 4, !dbg !97
getOpcode: 27
instruction ==   %23 = load i32* %x, align 4, !dbg !97	Line Number == 33
non branch instruction to b executed
  %23 = load i32* %x, align 4, !dbg !97

 executing :load instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 0

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br i1 %24, label %25, label %30, !dbg !97
printing operands : 2
operand # : 1 :   %23 = load i32* %x, align 4, !dbg !97
operand # : 2 : i32 0
printing instruction:   %24 = icmp sgt i32 %23, 0, !dbg !97
getOpcode: 46
instruction ==   %24 = icmp sgt i32 %23, 0, !dbg !97	Line Number == 33
non branch instruction to b executed
  %24 = icmp sgt i32 %23, 0, !dbg !97

 executing :icmp instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 0

operand0 ==   %23 = load i32* %x, align 4, !dbg !97
operand1 == i32 0
lhs == i32 0
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 3
operand # : 1 :   %24 = icmp sgt i32 %23, 0, !dbg !97
operand # : 2 : 
; <label>:30                                      ; preds = %22
  %31 = load i32* %2, align 4, !dbg !103
  %32 = add nsw i32 %31, 2, !dbg !103
  store i32 %32, i32* %2, align 4, !dbg !103
  br label %33

operand # : 3 : 
; <label>:25                                      ; preds = %22
  %26 = load i32* %1, align 4, !dbg !99
  %27 = add nsw i32 %26, 1, !dbg !99
  store i32 %27, i32* %1, align 4, !dbg !99
  %28 = load i32* %x, align 4, !dbg !101
  %29 = add nsw i32 %28, -1, !dbg !101
  store i32 %29, i32* %x, align 4, !dbg !101
  br label %22, !dbg !102

printing instruction:   br i1 %24, label %25, label %30, !dbg !97
getOpcode: 2
instruction ==   br i1 %24, label %25, label %30, !dbg !97	Line Number == 33
Split Point Hit!
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 4 instructions
hasNext == 1
InstructionPtr now at   %32 = add nsw i32 %31, 2, !dbg !103
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %31 = load i32* %2, align 4, !dbg !103
getOpcode: 27
instruction ==   %31 = load i32* %2, align 4, !dbg !103	Line Number == 38
non branch instruction to b executed
  %31 = load i32* %2, align 4, !dbg !103

 executing :load instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 0

exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   store i32 %32, i32* %2, align 4, !dbg !103
printing operands : 2
operand # : 1 :   %31 = load i32* %2, align 4, !dbg !103
operand # : 2 : i32 2
printing instruction:   %32 = add nsw i32 %31, 2, !dbg !103
getOpcode: 8
instruction ==   %32 = add nsw i32 %31, 2, !dbg !103	Line Number == 38
non branch instruction to b executed
  %32 = add nsw i32 %31, 2, !dbg !103

 executing :add instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 0

lhs not NULL
rhs not NULL
lhs: i32 %b
rhs: i32 2
exiting executeNonBranchingInstruction
hasNext == 1
InstructionPtr now at   br label %33
printing operands : 2
operand # : 1 :   %32 = add nsw i32 %31, 2, !dbg !103
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %32, i32* %2, align 4, !dbg !103
getOpcode: 28
instruction ==   store i32 %32, i32* %2, align 4, !dbg !103	Line Number == 38
non branch instruction to b executed
  store i32 %32, i32* %2, align 4, !dbg !103

 executing :store instruction 
State at this point == 
------------------a	 = 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 = 	i32 %b
x	 = 	i32 0

exiting executeNonBranchingInstruction
hasNext == 0
InstructionPtr now at END of block
printing operands : 1
operand # : 1 : 
; <label>:33                                      ; preds = %30, %20
  ret void, !dbg !104

printing instruction:   br label %33
getOpcode: 2
Split Point Hit!
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1
Basic block (name= ) has 1 instructions
hasNext == 0
InstructionPtr now at END of block
printing operands : 0
printing instruction:   ret void, !dbg !104
getOpcode: 1
instruction ==   ret void, !dbg !104	Line Number == 40
Split Point Hit!
exiting getNextBlocks
number of blocks :  1
left child done!!
right child NULL!!
3: size of deque : 2
1: size of deque : 2
2: size of deque : 1

Program received signal SIGSEGV, Segmentation fault.
0x000000000051cedd in llvm::Value::getName() const ()
(gdb) bt
#0  0x000000000051cedd in llvm::Value::getName() const ()
#1  0x0000000000465581 in PrintLLVMName(llvm::raw_ostream&, llvm::Value const*)
    ()
#2  0x000000000046d7f4 in llvm::AssemblyWriter::printInstruction(llvm::Instruction const&) ()
#3  0x00000000004706cb in llvm::Value::print(llvm::raw_ostream&) const ()
#4  0x000000000044b2ba in getString (val=0x8624e8) at src/utils.cpp:11
#5  0x000000000043f1da in SymbolicExecutor::executeBasicBlock (
    this=0x7fffffffc860, symTreeNode=0xa05b50) at src/symbolicexecutor.cpp:287
#6  0x000000000043fabd in SymbolicExecutor::symbolicExecute (
    this=0x7fffffffc860) at src/symbolicexecutor.cpp:458
#7  0x00000000004405e3 in SymbolicExecutor::executeFunction (
    this=0x7fffffffc860, function=0x84a3a0) at src/symbolicexecutor.cpp:569
#8  0x000000000044091b in SymbolicExecutor::execute (this=0x7fffffffc860, 
    val=...) at src/symbolicexecutor.cpp:614
#9  0x0000000000439deb in main () at src/main.cpp:80
(gdb) g[Kframe 5
#5  0x000000000043f1da in SymbolicExecutor::executeBasicBlock (
    this=0x7fffffffc860, symTreeNode=0xa05b50) at src/symbolicexecutor.cpp:287
287				std::cout << "printing instruction: " << getString(instruction) << "\n";
(gdb) getString(instruction)
(gdb) print getString(instruction)
(gdb) (gdb) quit
A debugging session is active.

	Inferior 1 [process 4020] will be killed.

Quit anyway? (y or n) EOF [assumed Y]
