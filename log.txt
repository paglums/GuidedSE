build/hello.bc 
build/hello.bc 
prev id: -1
Basic block (name= ) has 11 instructions
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %1 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %1 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %2 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %2 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %x = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %x = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b

executing Store 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 %a
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %a, i32* %1, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %a, i32* %1, align 4

 executing :store instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b

executing Store 
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 : !{i32* %1}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"a", metadata <badref>, i32 16777232, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [a] [line 16]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #1

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !15), !dbg !16
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !15), !dbg !16	Line Number == 16
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !15), !dbg !16

 executing :call instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 %b
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %b, i32* %2, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %b, i32* %2, align 4

 executing :store instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a

executing Store 
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 : !{i32* %2}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"b", metadata <badref>, i32 33554448, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [b] [line 16]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #1

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !17), !dbg !18
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !17), !dbg !18	Line Number == 16
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !17), !dbg !18

 executing :call instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b

exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %3 = load i32* %1, align 4, !dbg !19
getOpcode: 27
instruction ==   %3 = load i32* %1, align 4, !dbg !19	Line Number == 18
non branch instruction to b executed
  %3 = load i32* %1, align 4, !dbg !19

 executing :load instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b

executing Load 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %4 = load i32* %2, align 4, !dbg !19
getOpcode: 27
instruction ==   %4 = load i32* %2, align 4, !dbg !19	Line Number == 18
non branch instruction to b executed
  %4 = load i32* %2, align 4, !dbg !19

 executing :load instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %3 = load i32* %1, align 4, !dbg !19
operand # : 2 :   %4 = load i32* %2, align 4, !dbg !19
printing instruction:   %5 = icmp sgt i32 %3, %4, !dbg !19
getOpcode: 46
instruction ==   %5 = icmp sgt i32 %3, %4, !dbg !19	Line Number == 18
non branch instruction to b executed
  %5 = icmp sgt i32 %3, %4, !dbg !19

 executing :icmp instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b

executing ICmp 
operand0 ==   %3 = load i32* %1, align 4, !dbg !19
operand1 ==   %4 = load i32* %2, align 4, !dbg !19
lhs == i32 %a
rhs == i32 %b
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %5 = icmp sgt i32 %3, %4, !dbg !19
operand # : 2 : 
; <label>:18                                      ; preds = %0
  call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !27), !dbg !29
  store i32 3, i32* %x, align 4, !dbg !30
  br label %19, !dbg !31

operand # : 3 : 
; <label>:6                                       ; preds = %0
  %7 = load i32* %1, align 4, !dbg !21
  %8 = add nsw i32 %7, 1, !dbg !21
  %9 = load i32* %2, align 4, !dbg !21
  %10 = icmp sgt i32 %8, %9, !dbg !21
  br i1 %10, label %11, label %14, !dbg !21

printing instruction:   br i1 %5, label %6, label %18, !dbg !19
getOpcode: 2
instruction ==   br i1 %5, label %6, label %18, !dbg !19	Line Number == 18
Branch Instruction Hit!
ADDING CONDITION : (i32 %a>i32 %b)
exiting getNextBlocks
size of deque : 2
proceed? 
prevId : isBFS : steps : dir : prev id: 0
left child started!!
left child done!!
right child started!!
right child done!!
Basic block (name= ) has 3 instructions
printing operands : 3
operand # : 1 : !{i32* %x}

operand # : 2 : !{i32 786688, metadata <badref>, metadata !"x", metadata <badref>, i32 27, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [x] [line 27]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #1

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !27), !dbg !29
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !27), !dbg !29	Line Number == 27
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !27), !dbg !29

 executing :call instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 3
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 3, i32* %x, align 4, !dbg !30
getOpcode: 28
instruction ==   store i32 3, i32* %x, align 4, !dbg !30	Line Number == 27
non branch instruction to b executed
  store i32 3, i32* %x, align 4, !dbg !30

 executing :store instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:19                                      ; preds = %22, %18
  %20 = load i32* %x, align 4, !dbg !32
  %21 = icmp sgt i32 %20, 0, !dbg !32
  br i1 %21, label %22, label %27, !dbg !32

printing instruction:   br label %19, !dbg !31
getOpcode: 2
instruction ==   br label %19, !dbg !31	Line Number == 28
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %20 = load i32* %x, align 4, !dbg !32
getOpcode: 27
instruction ==   %20 = load i32* %x, align 4, !dbg !32	Line Number == 28
non branch instruction to b executed
  %20 = load i32* %x, align 4, !dbg !32

 executing :load instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %20 = load i32* %x, align 4, !dbg !32
operand # : 2 : i32 0
printing instruction:   %21 = icmp sgt i32 %20, 0, !dbg !32
getOpcode: 46
instruction ==   %21 = icmp sgt i32 %20, 0, !dbg !32	Line Number == 28
non branch instruction to b executed
  %21 = icmp sgt i32 %20, 0, !dbg !32

 executing :icmp instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
operand1 == i32 0
lhs == i32 3
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %21 = icmp sgt i32 %20, 0, !dbg !32
operand # : 2 : 
; <label>:27                                      ; preds = %19
  %28 = load i32* %2, align 4, !dbg !38
  %29 = add nsw i32 %28, 2, !dbg !38
  store i32 %29, i32* %2, align 4, !dbg !38
  br label %30

operand # : 3 : 
; <label>:22                                      ; preds = %19
  %23 = load i32* %1, align 4, !dbg !34
  %24 = add nsw i32 %23, 1, !dbg !34
  store i32 %24, i32* %1, align 4, !dbg !34
  %25 = load i32* %x, align 4, !dbg !36
  %26 = add nsw i32 %25, -1, !dbg !36
  store i32 %26, i32* %x, align 4, !dbg !36
  br label %19, !dbg !37

printing instruction:   br i1 %21, label %22, label %27, !dbg !32
getOpcode: 2
instruction ==   br i1 %21, label %22, label %27, !dbg !32	Line Number == 28
Branch Instruction Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 7 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %23 = load i32* %1, align 4, !dbg !34
getOpcode: 27
instruction ==   %23 = load i32* %1, align 4, !dbg !34	Line Number == 30
non branch instruction to b executed
  %23 = load i32* %1, align 4, !dbg !34

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %23 = load i32* %1, align 4, !dbg !34
operand # : 2 : i32 1
printing instruction:   %24 = add nsw i32 %23, 1, !dbg !34
getOpcode: 8
instruction ==   %24 = add nsw i32 %23, 1, !dbg !34	Line Number == 30
non branch instruction to b executed
  %24 = add nsw i32 %23, 1, !dbg !34

 executing :add instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 %a
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %24 = add nsw i32 %23, 1, !dbg !34
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %24, i32* %1, align 4, !dbg !34
getOpcode: 28
instruction ==   store i32 %24, i32* %1, align 4, !dbg !34	Line Number == 30
non branch instruction to b executed
  store i32 %24, i32* %1, align 4, !dbg !34

 executing :store instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %25 = load i32* %x, align 4, !dbg !36
getOpcode: 27
instruction ==   %25 = load i32* %x, align 4, !dbg !36	Line Number == 31
non branch instruction to b executed
  %25 = load i32* %x, align 4, !dbg !36

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %25 = load i32* %x, align 4, !dbg !36
operand # : 2 : i32 -1
printing instruction:   %26 = add nsw i32 %25, -1, !dbg !36
getOpcode: 8
instruction ==   %26 = add nsw i32 %25, -1, !dbg !36	Line Number == 31
non branch instruction to b executed
  %26 = add nsw i32 %25, -1, !dbg !36

 executing :add instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 3
rhs: i32 -1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %26 = add nsw i32 %25, -1, !dbg !36
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %26, i32* %x, align 4, !dbg !36
getOpcode: 28
instruction ==   store i32 %26, i32* %x, align 4, !dbg !36	Line Number == 31
non branch instruction to b executed
  store i32 %26, i32* %x, align 4, !dbg !36

 executing :store instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:19                                      ; preds = %22, %18
  %20 = load i32* %x, align 4, !dbg !32
  %21 = icmp sgt i32 %20, 0, !dbg !32
  br i1 %21, label %22, label %27, !dbg !32

printing instruction:   br label %19, !dbg !37
getOpcode: 2
instruction ==   br label %19, !dbg !37	Line Number == 32
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %20 = load i32* %x, align 4, !dbg !32
getOpcode: 27
instruction ==   %20 = load i32* %x, align 4, !dbg !32	Line Number == 28
non branch instruction to b executed
  %20 = load i32* %x, align 4, !dbg !32

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 3
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %20 = load i32* %x, align 4, !dbg !32
operand # : 2 : i32 0
printing instruction:   %21 = icmp sgt i32 %20, 0, !dbg !32
getOpcode: 46
instruction ==   %21 = icmp sgt i32 %20, 0, !dbg !32	Line Number == 28
non branch instruction to b executed
  %21 = icmp sgt i32 %20, 0, !dbg !32

 executing :icmp instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
operand1 == i32 0
lhs == i32 2
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %21 = icmp sgt i32 %20, 0, !dbg !32
operand # : 2 : 
; <label>:27                                      ; preds = %19
  %28 = load i32* %2, align 4, !dbg !38
  %29 = add nsw i32 %28, 2, !dbg !38
  store i32 %29, i32* %2, align 4, !dbg !38
  br label %30

operand # : 3 : 
; <label>:22                                      ; preds = %19
  %23 = load i32* %1, align 4, !dbg !34
  %24 = add nsw i32 %23, 1, !dbg !34
  store i32 %24, i32* %1, align 4, !dbg !34
  %25 = load i32* %x, align 4, !dbg !36
  %26 = add nsw i32 %25, -1, !dbg !36
  store i32 %26, i32* %x, align 4, !dbg !36
  br label %19, !dbg !37

printing instruction:   br i1 %21, label %22, label %27, !dbg !32
getOpcode: 2
instruction ==   br i1 %21, label %22, label %27, !dbg !32	Line Number == 28
Branch Instruction Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 7 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %23 = load i32* %1, align 4, !dbg !34
getOpcode: 27
instruction ==   %23 = load i32* %1, align 4, !dbg !34	Line Number == 30
non branch instruction to b executed
  %23 = load i32* %1, align 4, !dbg !34

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %23 = load i32* %1, align 4, !dbg !34
operand # : 2 : i32 1
printing instruction:   %24 = add nsw i32 %23, 1, !dbg !34
getOpcode: 8
instruction ==   %24 = add nsw i32 %23, 1, !dbg !34	Line Number == 30
non branch instruction to b executed
  %24 = add nsw i32 %23, 1, !dbg !34

 executing :add instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing Add 
lhs not NULL
rhs not NULL
lhs: (i32 %a+i32 1)
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %24 = add nsw i32 %23, 1, !dbg !34
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %24, i32* %1, align 4, !dbg !34
getOpcode: 28
instruction ==   store i32 %24, i32* %1, align 4, !dbg !34	Line Number == 30
non branch instruction to b executed
  store i32 %24, i32* %1, align 4, !dbg !34

 executing :store instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %25 = load i32* %x, align 4, !dbg !36
getOpcode: 27
instruction ==   %25 = load i32* %x, align 4, !dbg !36	Line Number == 31
non branch instruction to b executed
  %25 = load i32* %x, align 4, !dbg !36

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %25 = load i32* %x, align 4, !dbg !36
operand # : 2 : i32 -1
printing instruction:   %26 = add nsw i32 %25, -1, !dbg !36
getOpcode: 8
instruction ==   %26 = add nsw i32 %25, -1, !dbg !36	Line Number == 31
non branch instruction to b executed
  %26 = add nsw i32 %25, -1, !dbg !36

 executing :add instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 2
rhs: i32 -1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %26 = add nsw i32 %25, -1, !dbg !36
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %26, i32* %x, align 4, !dbg !36
getOpcode: 28
instruction ==   store i32 %26, i32* %x, align 4, !dbg !36	Line Number == 31
non branch instruction to b executed
  store i32 %26, i32* %x, align 4, !dbg !36

 executing :store instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:19                                      ; preds = %22, %18
  %20 = load i32* %x, align 4, !dbg !32
  %21 = icmp sgt i32 %20, 0, !dbg !32
  br i1 %21, label %22, label %27, !dbg !32

printing instruction:   br label %19, !dbg !37
getOpcode: 2
instruction ==   br label %19, !dbg !37	Line Number == 32
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %20 = load i32* %x, align 4, !dbg !32
getOpcode: 27
instruction ==   %20 = load i32* %x, align 4, !dbg !32	Line Number == 28
non branch instruction to b executed
  %20 = load i32* %x, align 4, !dbg !32

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 2
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %20 = load i32* %x, align 4, !dbg !32
operand # : 2 : i32 0
printing instruction:   %21 = icmp sgt i32 %20, 0, !dbg !32
getOpcode: 46
instruction ==   %21 = icmp sgt i32 %20, 0, !dbg !32	Line Number == 28
non branch instruction to b executed
  %21 = icmp sgt i32 %20, 0, !dbg !32

 executing :icmp instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
operand1 == i32 0
lhs == i32 1
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %21 = icmp sgt i32 %20, 0, !dbg !32
operand # : 2 : 
; <label>:27                                      ; preds = %19
  %28 = load i32* %2, align 4, !dbg !38
  %29 = add nsw i32 %28, 2, !dbg !38
  store i32 %29, i32* %2, align 4, !dbg !38
  br label %30

operand # : 3 : 
; <label>:22                                      ; preds = %19
  %23 = load i32* %1, align 4, !dbg !34
  %24 = add nsw i32 %23, 1, !dbg !34
  store i32 %24, i32* %1, align 4, !dbg !34
  %25 = load i32* %x, align 4, !dbg !36
  %26 = add nsw i32 %25, -1, !dbg !36
  store i32 %26, i32* %x, align 4, !dbg !36
  br label %19, !dbg !37

printing instruction:   br i1 %21, label %22, label %27, !dbg !32
getOpcode: 2
instruction ==   br i1 %21, label %22, label %27, !dbg !32	Line Number == 28
Branch Instruction Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 7 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %23 = load i32* %1, align 4, !dbg !34
getOpcode: 27
instruction ==   %23 = load i32* %1, align 4, !dbg !34	Line Number == 30
non branch instruction to b executed
  %23 = load i32* %1, align 4, !dbg !34

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %23 = load i32* %1, align 4, !dbg !34
operand # : 2 : i32 1
printing instruction:   %24 = add nsw i32 %23, 1, !dbg !34
getOpcode: 8
instruction ==   %24 = add nsw i32 %23, 1, !dbg !34	Line Number == 30
non branch instruction to b executed
  %24 = add nsw i32 %23, 1, !dbg !34

 executing :add instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing Add 
lhs not NULL
rhs not NULL
lhs: ((i32 %a+i32 1)+i32 1)
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %24 = add nsw i32 %23, 1, !dbg !34
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %24, i32* %1, align 4, !dbg !34
getOpcode: 28
instruction ==   store i32 %24, i32* %1, align 4, !dbg !34	Line Number == 30
non branch instruction to b executed
  store i32 %24, i32* %1, align 4, !dbg !34

 executing :store instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %25 = load i32* %x, align 4, !dbg !36
getOpcode: 27
instruction ==   %25 = load i32* %x, align 4, !dbg !36	Line Number == 31
non branch instruction to b executed
  %25 = load i32* %x, align 4, !dbg !36

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %25 = load i32* %x, align 4, !dbg !36
operand # : 2 : i32 -1
printing instruction:   %26 = add nsw i32 %25, -1, !dbg !36
getOpcode: 8
instruction ==   %26 = add nsw i32 %25, -1, !dbg !36	Line Number == 31
non branch instruction to b executed
  %26 = add nsw i32 %25, -1, !dbg !36

 executing :add instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 1
rhs: i32 -1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %26 = add nsw i32 %25, -1, !dbg !36
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %26, i32* %x, align 4, !dbg !36
getOpcode: 28
instruction ==   store i32 %26, i32* %x, align 4, !dbg !36	Line Number == 31
non branch instruction to b executed
  store i32 %26, i32* %x, align 4, !dbg !36

 executing :store instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:19                                      ; preds = %22, %18
  %20 = load i32* %x, align 4, !dbg !32
  %21 = icmp sgt i32 %20, 0, !dbg !32
  br i1 %21, label %22, label %27, !dbg !32

printing instruction:   br label %19, !dbg !37
getOpcode: 2
instruction ==   br label %19, !dbg !37	Line Number == 32
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %20 = load i32* %x, align 4, !dbg !32
getOpcode: 27
instruction ==   %20 = load i32* %x, align 4, !dbg !32	Line Number == 28
non branch instruction to b executed
  %20 = load i32* %x, align 4, !dbg !32

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 1
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %20 = load i32* %x, align 4, !dbg !32
operand # : 2 : i32 0
printing instruction:   %21 = icmp sgt i32 %20, 0, !dbg !32
getOpcode: 46
instruction ==   %21 = icmp sgt i32 %20, 0, !dbg !32	Line Number == 28
non branch instruction to b executed
  %21 = icmp sgt i32 %20, 0, !dbg !32

 executing :icmp instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 0
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
operand1 == i32 0
lhs == i32 0
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %21 = icmp sgt i32 %20, 0, !dbg !32
operand # : 2 : 
; <label>:27                                      ; preds = %19
  %28 = load i32* %2, align 4, !dbg !38
  %29 = add nsw i32 %28, 2, !dbg !38
  store i32 %29, i32* %2, align 4, !dbg !38
  br label %30

operand # : 3 : 
; <label>:22                                      ; preds = %19
  %23 = load i32* %1, align 4, !dbg !34
  %24 = add nsw i32 %23, 1, !dbg !34
  store i32 %24, i32* %1, align 4, !dbg !34
  %25 = load i32* %x, align 4, !dbg !36
  %26 = add nsw i32 %25, -1, !dbg !36
  store i32 %26, i32* %x, align 4, !dbg !36
  br label %19, !dbg !37

printing instruction:   br i1 %21, label %22, label %27, !dbg !32
getOpcode: 2
instruction ==   br i1 %21, label %22, label %27, !dbg !32	Line Number == 28
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 4 instructions
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %28 = load i32* %2, align 4, !dbg !38
getOpcode: 27
instruction ==   %28 = load i32* %2, align 4, !dbg !38	Line Number == 33
non branch instruction to b executed
  %28 = load i32* %2, align 4, !dbg !38

 executing :load instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 0
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 0
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %28 = load i32* %2, align 4, !dbg !38
operand # : 2 : i32 2
printing instruction:   %29 = add nsw i32 %28, 2, !dbg !38
getOpcode: 8
instruction ==   %29 = add nsw i32 %28, 2, !dbg !38	Line Number == 33
non branch instruction to b executed
  %29 = add nsw i32 %28, 2, !dbg !38

 executing :add instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 0
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 0
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0
  %28 = load i32* %2, align 4, !dbg !38	 == 	i32 %b

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 %b
rhs: i32 2
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %29 = add nsw i32 %28, 2, !dbg !38
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %29, i32* %2, align 4, !dbg !38
getOpcode: 28
instruction ==   store i32 %29, i32* %2, align 4, !dbg !38	Line Number == 33
non branch instruction to b executed
  store i32 %29, i32* %2, align 4, !dbg !38

 executing :store instruction 
State at this point == 
------------------  %20 = load i32* %x, align 4, !dbg !32	 == 	i32 0
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 0
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0
  %28 = load i32* %2, align 4, !dbg !38	 == 	i32 %b
  %29 = add nsw i32 %28, 2, !dbg !38	 == 	(i32 %b+i32 2)

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:30                                      ; preds = %27, %17
  ret void, !dbg !39

printing instruction:   br label %30
getOpcode: 2
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 1 instructions
printing operands : 0
printing instruction:   ret void, !dbg !39
getOpcode: 1
instruction ==   ret void, !dbg !39	Line Number == 35
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 5 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %7 = load i32* %1, align 4, !dbg !21
getOpcode: 27
instruction ==   %7 = load i32* %1, align 4, !dbg !21	Line Number == 20
non branch instruction to b executed
  %7 = load i32* %1, align 4, !dbg !21

 executing :load instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %7 = load i32* %1, align 4, !dbg !21
operand # : 2 : i32 1
printing instruction:   %8 = add nsw i32 %7, 1, !dbg !21
getOpcode: 8
instruction ==   %8 = add nsw i32 %7, 1, !dbg !21	Line Number == 20
non branch instruction to b executed
  %8 = add nsw i32 %7, 1, !dbg !21

 executing :add instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 %a
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %9 = load i32* %2, align 4, !dbg !21
getOpcode: 27
instruction ==   %9 = load i32* %2, align 4, !dbg !21	Line Number == 20
non branch instruction to b executed
  %9 = load i32* %2, align 4, !dbg !21

 executing :load instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %8 = add nsw i32 %7, 1, !dbg !21
operand # : 2 :   %9 = load i32* %2, align 4, !dbg !21
printing instruction:   %10 = icmp sgt i32 %8, %9, !dbg !21
getOpcode: 46
instruction ==   %10 = icmp sgt i32 %8, %9, !dbg !21	Line Number == 20
non branch instruction to b executed
  %10 = icmp sgt i32 %8, %9, !dbg !21

 executing :icmp instruction 
State at this point == 
------------------i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

executing ICmp 
operand0 ==   %8 = add nsw i32 %7, 1, !dbg !21
operand1 ==   %9 = load i32* %2, align 4, !dbg !21
lhs == (i32 %a+i32 1)
rhs == i32 %b
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %10 = icmp sgt i32 %8, %9, !dbg !21
operand # : 2 : 
; <label>:14                                      ; preds = %6
  %15 = load i32* %2, align 4, !dbg !25
  %16 = add nsw i32 %15, 2, !dbg !25
  store i32 %16, i32* %2, align 4, !dbg !25
  br label %17

operand # : 3 : 
; <label>:11                                      ; preds = %6
  %12 = load i32* %2, align 4, !dbg !24
  %13 = add nsw i32 %12, 1, !dbg !24
  store i32 %13, i32* %2, align 4, !dbg !24
  br label %17, !dbg !24

printing instruction:   br i1 %10, label %11, label %14, !dbg !21
getOpcode: 2
instruction ==   br i1 %10, label %11, label %14, !dbg !21	Line Number == 20
Branch Instruction Hit!
ADDING CONDITION : ((i32 %a+i32 1)>i32 %b)
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 4 instructions
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %15 = load i32* %2, align 4, !dbg !25
getOpcode: 27
instruction ==   %15 = load i32* %2, align 4, !dbg !25	Line Number == 23
non branch instruction to b executed
  %15 = load i32* %2, align 4, !dbg !25

 executing :load instruction 
State at this point == 
------------------  %10 = icmp sgt i32 %8, %9, !dbg !21	 == 	((i32 %a+i32 1)>i32 %b)
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %15 = load i32* %2, align 4, !dbg !25
operand # : 2 : i32 2
printing instruction:   %16 = add nsw i32 %15, 2, !dbg !25
getOpcode: 8
instruction ==   %16 = add nsw i32 %15, 2, !dbg !25	Line Number == 23
non branch instruction to b executed
  %16 = add nsw i32 %15, 2, !dbg !25

 executing :add instruction 
State at this point == 
------------------  %10 = icmp sgt i32 %8, %9, !dbg !21	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %2, align 4, !dbg !25	 == 	i32 %b
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 %b
rhs: i32 2
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %16 = add nsw i32 %15, 2, !dbg !25
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %16, i32* %2, align 4, !dbg !25
getOpcode: 28
instruction ==   store i32 %16, i32* %2, align 4, !dbg !25	Line Number == 23
non branch instruction to b executed
  store i32 %16, i32* %2, align 4, !dbg !25

 executing :store instruction 
State at this point == 
------------------  %10 = icmp sgt i32 %8, %9, !dbg !21	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %2, align 4, !dbg !25	 == 	i32 %b
  %16 = add nsw i32 %15, 2, !dbg !25	 == 	(i32 %b+i32 2)
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:17                                      ; preds = %14, %11
  br label %30, !dbg !26

printing instruction:   br label %17
getOpcode: 2
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 1 instructions
printing operands : 1
operand # : 1 : 
; <label>:30                                      ; preds = %27, %17
  ret void, !dbg !39

printing instruction:   br label %30, !dbg !26
getOpcode: 2
instruction ==   br label %30, !dbg !26	Line Number == 24
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 1 instructions
printing operands : 0
printing instruction:   ret void, !dbg !39
getOpcode: 1
instruction ==   ret void, !dbg !39	Line Number == 35
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 4 instructions
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %12 = load i32* %2, align 4, !dbg !24
getOpcode: 27
instruction ==   %12 = load i32* %2, align 4, !dbg !24	Line Number == 21
non branch instruction to b executed
  %12 = load i32* %2, align 4, !dbg !24

 executing :load instruction 
State at this point == 
------------------  %10 = icmp sgt i32 %8, %9, !dbg !21	 == 	((i32 %a+i32 1)>i32 %b)
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

executing Load 
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %12 = load i32* %2, align 4, !dbg !24
operand # : 2 : i32 1
printing instruction:   %13 = add nsw i32 %12, 1, !dbg !24
getOpcode: 8
instruction ==   %13 = add nsw i32 %12, 1, !dbg !24	Line Number == 21
non branch instruction to b executed
  %13 = add nsw i32 %12, 1, !dbg !24

 executing :add instruction 
State at this point == 
------------------  %10 = icmp sgt i32 %8, %9, !dbg !21	 == 	((i32 %a+i32 1)>i32 %b)
  %12 = load i32* %2, align 4, !dbg !24	 == 	i32 %b
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

executing Add 
lhs not NULL
rhs not NULL
lhs: i32 %b
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %13 = add nsw i32 %12, 1, !dbg !24
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %13, i32* %2, align 4, !dbg !24
getOpcode: 28
instruction ==   store i32 %13, i32* %2, align 4, !dbg !24	Line Number == 21
non branch instruction to b executed
  store i32 %13, i32* %2, align 4, !dbg !24

 executing :store instruction 
State at this point == 
------------------  %10 = icmp sgt i32 %8, %9, !dbg !21	 == 	((i32 %a+i32 1)>i32 %b)
  %12 = load i32* %2, align 4, !dbg !24	 == 	i32 %b
  %13 = add nsw i32 %12, 1, !dbg !24	 == 	(i32 %b+i32 1)
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

executing Store 
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:17                                      ; preds = %14, %11
  br label %30, !dbg !26

printing instruction:   br label %17, !dbg !24
getOpcode: 2
instruction ==   br label %17, !dbg !24	Line Number == 21
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 1 instructions
printing operands : 1
operand # : 1 : 
; <label>:30                                      ; preds = %27, %17
  ret void, !dbg !39

printing instruction:   br label %30, !dbg !26
getOpcode: 2
instruction ==   br label %30, !dbg !26	Line Number == 24
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 1 instructions
printing operands : 0
printing instruction:   ret void, !dbg !39
getOpcode: 1
instruction ==   ret void, !dbg !39	Line Number == 35
Branch Instruction Hit!
exiting getNextBlocks
size of deque : 0
proceed? 
prevId : 