build/hello.bc 
build/hello.bc 
prev id: -1
Basic block (name= ) has 11 instructions
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %1 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %1 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 

executing Allocate 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %2 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %2 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 

executing Allocate 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %x = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %x = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 

executing Allocate 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 %a
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %a, i32* %1, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %a, i32* %1, align 4

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 : !{i32* %1}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"a", metadata <badref>, i32 16777234, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [a] [line 18]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80	Line Number == 18
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80

 executing :call instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a

 user variables: 

 variable name : -- a

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 %b
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %b, i32* %2, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %b, i32* %2, align 4

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 : !{i32* %2}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"b", metadata <badref>, i32 33554450, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [b] [line 18]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82	Line Number == 18
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82

 executing :call instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b

 user variables: 
a	 == 	i32 %a

 variable name : -- b

exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %3 = load i32* %1, align 4, !dbg !83
getOpcode: 27
instruction ==   %3 = load i32* %1, align 4, !dbg !83	Line Number == 20
non branch instruction to b executed
  %3 = load i32* %1, align 4, !dbg !83

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %4 = load i32* %2, align 4, !dbg !83
getOpcode: 27
instruction ==   %4 = load i32* %2, align 4, !dbg !83	Line Number == 20
non branch instruction to b executed
  %4 = load i32* %2, align 4, !dbg !83

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %3 = load i32* %1, align 4, !dbg !83
operand # : 2 :   %4 = load i32* %2, align 4, !dbg !83
printing instruction:   %5 = icmp sgt i32 %3, %4, !dbg !83
getOpcode: 46
instruction ==   %5 = icmp sgt i32 %3, %4, !dbg !83	Line Number == 20
non branch instruction to b executed
  %5 = icmp sgt i32 %3, %4, !dbg !83

 executing :icmp instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b

<<<<<<< HEAD
operand0 ==   %3 = load i32* %1, align 4, !dbg !83
operand1 ==   %4 = load i32* %2, align 4, !dbg !83
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing ICmp 
operand0 ==   %3 = load i32* %1, align 4, !dbg !19
operand1 ==   %4 = load i32* %2, align 4, !dbg !19
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs == i32 %a
rhs == i32 %b
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %5 = icmp sgt i32 %3, %4, !dbg !83
operand # : 2 : 
; <label>:23                                      ; preds = %0
  call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !93), !dbg !95
  store i32 3, i32* %x, align 4, !dbg !96
  br label %24, !dbg !97

operand # : 3 : 
; <label>:6                                       ; preds = %0
  %7 = load i32* %1, align 4, !dbg !85
  %8 = add nsw i32 %7, 1, !dbg !85
  %9 = load i32* %2, align 4, !dbg !85
  %10 = icmp sgt i32 %8, %9, !dbg !85
  br i1 %10, label %11, label %14, !dbg !85

printing instruction:   br i1 %5, label %6, label %23, !dbg !83
getOpcode: 2
instruction ==   br i1 %5, label %6, label %23, !dbg !83	Line Number == 20
Split Point Hit!
ADDING CONDITION : (i32 %a>i32 %b)
exiting getNextBlocks
size of deque : 2
proceed? 
prevId : isBFS : steps : dir : prev id: 0
left child started!!
left child done!!
right child started!!
right child done!!
Basic block (name= ) has 3 instructions
printing operands : 3
operand # : 1 : !{i32* %x}

operand # : 2 : !{i32 786688, metadata <badref>, metadata !"x", metadata <badref>, i32 32, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [x] [line 32]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !93), !dbg !95
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !93), !dbg !95	Line Number == 32
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !93), !dbg !95

 executing :call instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

 variable name : -- x

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 3
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 3, i32* %x, align 4, !dbg !96
getOpcode: 28
instruction ==   store i32 3, i32* %x, align 4, !dbg !96	Line Number == 32
non branch instruction to b executed
  store i32 3, i32* %x, align 4, !dbg !96

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b
x	 == 	  %x = alloca i32, align 4

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:24                                      ; preds = %27, %23
  %25 = load i32* %x, align 4, !dbg !98
  %26 = icmp sgt i32 %25, 0, !dbg !98
  br i1 %26, label %27, label %32, !dbg !98

printing instruction:   br label %24, !dbg !97
getOpcode: 2
instruction ==   br label %24, !dbg !97	Line Number == 33
Split Point Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %25 = load i32* %x, align 4, !dbg !98
getOpcode: 27
instruction ==   %25 = load i32* %x, align 4, !dbg !98	Line Number == 33
non branch instruction to b executed
  %25 = load i32* %x, align 4, !dbg !98

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b
x	 == 	i32 3

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %25 = load i32* %x, align 4, !dbg !98
operand # : 2 : i32 0
printing instruction:   %26 = icmp sgt i32 %25, 0, !dbg !98
getOpcode: 46
instruction ==   %26 = icmp sgt i32 %25, 0, !dbg !98	Line Number == 33
non branch instruction to b executed
  %26 = icmp sgt i32 %25, 0, !dbg !98

 executing :icmp instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3

<<<<<<< HEAD
operand0 ==   %25 = load i32* %x, align 4, !dbg !98
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b
x	 == 	i32 3

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
operand1 == i32 0
lhs == i32 3
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %26 = icmp sgt i32 %25, 0, !dbg !98
operand # : 2 : 
; <label>:32                                      ; preds = %24
  %33 = load i32* %2, align 4, !dbg !104
  %34 = add nsw i32 %33, 2, !dbg !104
  store i32 %34, i32* %2, align 4, !dbg !104
  br label %35

operand # : 3 : 
; <label>:27                                      ; preds = %24
  %28 = load i32* %1, align 4, !dbg !100
  %29 = add nsw i32 %28, 1, !dbg !100
  store i32 %29, i32* %1, align 4, !dbg !100
  %30 = load i32* %x, align 4, !dbg !102
  %31 = add nsw i32 %30, -1, !dbg !102
  store i32 %31, i32* %x, align 4, !dbg !102
  br label %24, !dbg !103

printing instruction:   br i1 %26, label %27, label %32, !dbg !98
getOpcode: 2
instruction ==   br i1 %26, label %27, label %32, !dbg !98	Line Number == 33
Split Point Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 7 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %28 = load i32* %1, align 4, !dbg !100
getOpcode: 27
instruction ==   %28 = load i32* %1, align 4, !dbg !100	Line Number == 35
non branch instruction to b executed
  %28 = load i32* %1, align 4, !dbg !100

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b
x	 == 	i32 3

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %28 = load i32* %1, align 4, !dbg !100
operand # : 2 : i32 1
printing instruction:   %29 = add nsw i32 %28, 1, !dbg !100
getOpcode: 8
instruction ==   %29 = add nsw i32 %28, 1, !dbg !100	Line Number == 35
non branch instruction to b executed
  %29 = add nsw i32 %28, 1, !dbg !100

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b
x	 == 	i32 3

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 %a
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %29 = add nsw i32 %28, 1, !dbg !100
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %29, i32* %1, align 4, !dbg !100
getOpcode: 28
instruction ==   store i32 %29, i32* %1, align 4, !dbg !100	Line Number == 35
non branch instruction to b executed
  store i32 %29, i32* %1, align 4, !dbg !100

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b
x	 == 	i32 3

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %30 = load i32* %x, align 4, !dbg !102
getOpcode: 27
instruction ==   %30 = load i32* %x, align 4, !dbg !102	Line Number == 36
non branch instruction to b executed
  %30 = load i32* %x, align 4, !dbg !102

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 3

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %30 = load i32* %x, align 4, !dbg !102
operand # : 2 : i32 -1
printing instruction:   %31 = add nsw i32 %30, -1, !dbg !102
getOpcode: 8
instruction ==   %31 = add nsw i32 %30, -1, !dbg !102	Line Number == 36
non branch instruction to b executed
  %31 = add nsw i32 %30, -1, !dbg !102

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 3

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 3
rhs: i32 -1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %31 = add nsw i32 %30, -1, !dbg !102
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %31, i32* %x, align 4, !dbg !102
getOpcode: 28
instruction ==   store i32 %31, i32* %x, align 4, !dbg !102	Line Number == 36
non branch instruction to b executed
  store i32 %31, i32* %x, align 4, !dbg !102

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 3
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 3

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:24                                      ; preds = %27, %23
  %25 = load i32* %x, align 4, !dbg !98
  %26 = icmp sgt i32 %25, 0, !dbg !98
  br i1 %26, label %27, label %32, !dbg !98

printing instruction:   br label %24, !dbg !103
getOpcode: 2
instruction ==   br label %24, !dbg !103	Line Number == 37
Split Point Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %25 = load i32* %x, align 4, !dbg !98
getOpcode: 27
instruction ==   %25 = load i32* %x, align 4, !dbg !98	Line Number == 33
non branch instruction to b executed
  %25 = load i32* %x, align 4, !dbg !98

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 3
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %25 = load i32* %x, align 4, !dbg !98
operand # : 2 : i32 0
printing instruction:   %26 = icmp sgt i32 %25, 0, !dbg !98
getOpcode: 46
instruction ==   %26 = icmp sgt i32 %25, 0, !dbg !98	Line Number == 33
non branch instruction to b executed
  %26 = icmp sgt i32 %25, 0, !dbg !98

 executing :icmp instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

operand0 ==   %25 = load i32* %x, align 4, !dbg !98
=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
operand1 == i32 0
lhs == i32 2
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %26 = icmp sgt i32 %25, 0, !dbg !98
operand # : 2 : 
; <label>:32                                      ; preds = %24
  %33 = load i32* %2, align 4, !dbg !104
  %34 = add nsw i32 %33, 2, !dbg !104
  store i32 %34, i32* %2, align 4, !dbg !104
  br label %35

operand # : 3 : 
; <label>:27                                      ; preds = %24
  %28 = load i32* %1, align 4, !dbg !100
  %29 = add nsw i32 %28, 1, !dbg !100
  store i32 %29, i32* %1, align 4, !dbg !100
  %30 = load i32* %x, align 4, !dbg !102
  %31 = add nsw i32 %30, -1, !dbg !102
  store i32 %31, i32* %x, align 4, !dbg !102
  br label %24, !dbg !103

printing instruction:   br i1 %26, label %27, label %32, !dbg !98
getOpcode: 2
instruction ==   br i1 %26, label %27, label %32, !dbg !98	Line Number == 33
Split Point Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 7 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %28 = load i32* %1, align 4, !dbg !100
getOpcode: 27
instruction ==   %28 = load i32* %1, align 4, !dbg !100	Line Number == 35
non branch instruction to b executed
  %28 = load i32* %1, align 4, !dbg !100

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	i32 %a
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	i32 %a
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %28 = load i32* %1, align 4, !dbg !100
operand # : 2 : i32 1
printing instruction:   %29 = add nsw i32 %28, 1, !dbg !100
getOpcode: 8
instruction ==   %29 = add nsw i32 %28, 1, !dbg !100	Line Number == 35
non branch instruction to b executed
  %29 = add nsw i32 %28, 1, !dbg !100

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(i32 %a+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(i32 %a+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: (i32 %a+i32 1)
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %29 = add nsw i32 %28, 1, !dbg !100
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %29, i32* %1, align 4, !dbg !100
getOpcode: 28
instruction ==   store i32 %29, i32* %1, align 4, !dbg !100	Line Number == 35
non branch instruction to b executed
  store i32 %29, i32* %1, align 4, !dbg !100

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	(i32 %a+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %30 = load i32* %x, align 4, !dbg !102
getOpcode: 27
instruction ==   %30 = load i32* %x, align 4, !dbg !102	Line Number == 36
non branch instruction to b executed
  %30 = load i32* %x, align 4, !dbg !102

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 3
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 3
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %30 = load i32* %x, align 4, !dbg !102
operand # : 2 : i32 -1
printing instruction:   %31 = add nsw i32 %30, -1, !dbg !102
getOpcode: 8
instruction ==   %31 = add nsw i32 %30, -1, !dbg !102	Line Number == 36
non branch instruction to b executed
  %31 = add nsw i32 %30, -1, !dbg !102

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 2

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 2

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 2
rhs: i32 -1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %31 = add nsw i32 %30, -1, !dbg !102
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %31, i32* %x, align 4, !dbg !102
getOpcode: 28
instruction ==   store i32 %31, i32* %x, align 4, !dbg !102	Line Number == 36
non branch instruction to b executed
  store i32 %31, i32* %x, align 4, !dbg !102

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 2
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 2

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:24                                      ; preds = %27, %23
  %25 = load i32* %x, align 4, !dbg !98
  %26 = icmp sgt i32 %25, 0, !dbg !98
  br i1 %26, label %27, label %32, !dbg !98

printing instruction:   br label %24, !dbg !103
getOpcode: 2
instruction ==   br label %24, !dbg !103	Line Number == 37
Split Point Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %25 = load i32* %x, align 4, !dbg !98
getOpcode: 27
instruction ==   %25 = load i32* %x, align 4, !dbg !98	Line Number == 33
non branch instruction to b executed
  %25 = load i32* %x, align 4, !dbg !98

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 2
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %25 = load i32* %x, align 4, !dbg !98
operand # : 2 : i32 0
printing instruction:   %26 = icmp sgt i32 %25, 0, !dbg !98
getOpcode: 46
instruction ==   %26 = icmp sgt i32 %25, 0, !dbg !98	Line Number == 33
non branch instruction to b executed
  %26 = icmp sgt i32 %25, 0, !dbg !98

 executing :icmp instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

operand0 ==   %25 = load i32* %x, align 4, !dbg !98
=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
operand1 == i32 0
lhs == i32 1
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %26 = icmp sgt i32 %25, 0, !dbg !98
operand # : 2 : 
; <label>:32                                      ; preds = %24
  %33 = load i32* %2, align 4, !dbg !104
  %34 = add nsw i32 %33, 2, !dbg !104
  store i32 %34, i32* %2, align 4, !dbg !104
  br label %35

operand # : 3 : 
; <label>:27                                      ; preds = %24
  %28 = load i32* %1, align 4, !dbg !100
  %29 = add nsw i32 %28, 1, !dbg !100
  store i32 %29, i32* %1, align 4, !dbg !100
  %30 = load i32* %x, align 4, !dbg !102
  %31 = add nsw i32 %30, -1, !dbg !102
  store i32 %31, i32* %x, align 4, !dbg !102
  br label %24, !dbg !103

printing instruction:   br i1 %26, label %27, label %32, !dbg !98
getOpcode: 2
instruction ==   br i1 %26, label %27, label %32, !dbg !98	Line Number == 33
Split Point Hit!
ADDING CONDITION : i32 1
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 7 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %28 = load i32* %1, align 4, !dbg !100
getOpcode: 27
instruction ==   %28 = load i32* %1, align 4, !dbg !100	Line Number == 35
non branch instruction to b executed
  %28 = load i32* %1, align 4, !dbg !100

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	(i32 %a+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	(i32 %a+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %28 = load i32* %1, align 4, !dbg !100
operand # : 2 : i32 1
printing instruction:   %29 = add nsw i32 %28, 1, !dbg !100
getOpcode: 8
instruction ==   %29 = add nsw i32 %28, 1, !dbg !100	Line Number == 35
non branch instruction to b executed
  %29 = add nsw i32 %28, 1, !dbg !100

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: ((i32 %a+i32 1)+i32 1)
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %29 = add nsw i32 %28, 1, !dbg !100
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %29, i32* %1, align 4, !dbg !100
getOpcode: 28
instruction ==   store i32 %29, i32* %1, align 4, !dbg !100	Line Number == 35
non branch instruction to b executed
  store i32 %29, i32* %1, align 4, !dbg !100

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	((i32 %a+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	((i32 %a+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %30 = load i32* %x, align 4, !dbg !102
getOpcode: 27
instruction ==   %30 = load i32* %x, align 4, !dbg !102	Line Number == 36
non branch instruction to b executed
  %30 = load i32* %x, align 4, !dbg !102

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 2
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 2
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %30 = load i32* %x, align 4, !dbg !102
operand # : 2 : i32 -1
printing instruction:   %31 = add nsw i32 %30, -1, !dbg !102
getOpcode: 8
instruction ==   %31 = add nsw i32 %30, -1, !dbg !102	Line Number == 36
non branch instruction to b executed
  %31 = add nsw i32 %30, -1, !dbg !102

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 1
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 1

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 1

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 1
rhs: i32 -1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %31 = add nsw i32 %30, -1, !dbg !102
operand # : 2 :   %x = alloca i32, align 4
printing instruction:   store i32 %31, i32* %x, align 4, !dbg !102
getOpcode: 28
instruction ==   store i32 %31, i32* %x, align 4, !dbg !102	Line Number == 36
non branch instruction to b executed
  store i32 %31, i32* %x, align 4, !dbg !102

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 1
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 1
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 0

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 1

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:24                                      ; preds = %27, %23
  %25 = load i32* %x, align 4, !dbg !98
  %26 = icmp sgt i32 %25, 0, !dbg !98
  br i1 %26, label %27, label %32, !dbg !98

printing instruction:   br label %24, !dbg !103
getOpcode: 2
instruction ==   br label %24, !dbg !103	Line Number == 37
Split Point Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 3 instructions
printing operands : 1
operand # : 1 :   %x = alloca i32, align 4
printing instruction:   %25 = load i32* %x, align 4, !dbg !98
getOpcode: 27
instruction ==   %25 = load i32* %x, align 4, !dbg !98	Line Number == 33
non branch instruction to b executed
  %25 = load i32* %x, align 4, !dbg !98

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 1
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 1
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 0

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 0

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %25 = load i32* %x, align 4, !dbg !98
operand # : 2 : i32 0
printing instruction:   %26 = icmp sgt i32 %25, 0, !dbg !98
getOpcode: 46
instruction ==   %26 = icmp sgt i32 %25, 0, !dbg !98	Line Number == 33
non branch instruction to b executed
  %26 = icmp sgt i32 %25, 0, !dbg !98

 executing :icmp instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 0
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 1
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 1
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 0

operand0 ==   %25 = load i32* %x, align 4, !dbg !98
=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 1
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 0

executing ICmp 
operand0 ==   %20 = load i32* %x, align 4, !dbg !32
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
operand1 == i32 0
lhs == i32 0
rhs == i32 0
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %26 = icmp sgt i32 %25, 0, !dbg !98
operand # : 2 : 
; <label>:32                                      ; preds = %24
  %33 = load i32* %2, align 4, !dbg !104
  %34 = add nsw i32 %33, 2, !dbg !104
  store i32 %34, i32* %2, align 4, !dbg !104
  br label %35

operand # : 3 : 
; <label>:27                                      ; preds = %24
  %28 = load i32* %1, align 4, !dbg !100
  %29 = add nsw i32 %28, 1, !dbg !100
  store i32 %29, i32* %1, align 4, !dbg !100
  %30 = load i32* %x, align 4, !dbg !102
  %31 = add nsw i32 %30, -1, !dbg !102
  store i32 %31, i32* %x, align 4, !dbg !102
  br label %24, !dbg !103

printing instruction:   br i1 %26, label %27, label %32, !dbg !98
getOpcode: 2
instruction ==   br i1 %26, label %27, label %32, !dbg !98	Line Number == 33
Split Point Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 4 instructions
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %33 = load i32* %2, align 4, !dbg !104
getOpcode: 27
instruction ==   %33 = load i32* %2, align 4, !dbg !104	Line Number == 38
non branch instruction to b executed
  %33 = load i32* %2, align 4, !dbg !104

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 0
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 0
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 1
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 0

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 0
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 0

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %33 = load i32* %2, align 4, !dbg !104
operand # : 2 : i32 2
printing instruction:   %34 = add nsw i32 %33, 2, !dbg !104
getOpcode: 8
instruction ==   %34 = add nsw i32 %33, 2, !dbg !104	Line Number == 38
non branch instruction to b executed
  %34 = add nsw i32 %33, 2, !dbg !104

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 0
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 0
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 1
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 0
  %33 = load i32* %2, align 4, !dbg !104	 == 	i32 %b

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 0
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0
  %28 = load i32* %2, align 4, !dbg !38	 == 	i32 %b

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 0

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 %b
rhs: i32 2
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %34 = add nsw i32 %33, 2, !dbg !104
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %34, i32* %2, align 4, !dbg !104
getOpcode: 28
instruction ==   store i32 %34, i32* %2, align 4, !dbg !104	Line Number == 38
non branch instruction to b executed
  store i32 %34, i32* %2, align 4, !dbg !104

 executing :store instruction 
State at this point == 
------------------  %34 = add nsw i32 %33, 2, !dbg !104	 == 	(i32 %b+i32 2)
i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %2 = alloca i32, align 4	 == 	i32 %b
  %x = alloca i32, align 4	 == 	i32 0
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %25 = load i32* %x, align 4, !dbg !98	 == 	i32 0
  %26 = icmp sgt i32 %25, 0, !dbg !98	 == 	i32 0
  %28 = load i32* %1, align 4, !dbg !100	 == 	((i32 %a+i32 1)+i32 1)
  %29 = add nsw i32 %28, 1, !dbg !100	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %30 = load i32* %x, align 4, !dbg !102	 == 	i32 1
  %31 = add nsw i32 %30, -1, !dbg !102	 == 	i32 0
  %33 = load i32* %2, align 4, !dbg !104	 == 	i32 %b

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %21 = icmp sgt i32 %20, 0, !dbg !32	 == 	i32 0
  %23 = load i32* %1, align 4, !dbg !34	 == 	((i32 %a+i32 1)+i32 1)
  %24 = add nsw i32 %23, 1, !dbg !34	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
  %25 = load i32* %x, align 4, !dbg !36	 == 	i32 1
  %26 = add nsw i32 %25, -1, !dbg !36	 == 	i32 0
  %28 = load i32* %2, align 4, !dbg !38	 == 	i32 %b
  %29 = add nsw i32 %28, 2, !dbg !38	 == 	(i32 %b+i32 2)

 user variables: 
a	 == 	(((i32 %a+i32 1)+i32 1)+i32 1)
b	 == 	i32 %b
x	 == 	i32 0

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:35                                      ; preds = %32, %22
  ret void, !dbg !105

printing instruction:   br label %35
getOpcode: 2
Split Point Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 1 instructions
printing operands : 0
printing instruction:   ret void, !dbg !105
getOpcode: 1
instruction ==   ret void, !dbg !105	Line Number == 40
Split Point Hit!
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 5 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %7 = load i32* %1, align 4, !dbg !85
getOpcode: 27
instruction ==   %7 = load i32* %1, align 4, !dbg !85	Line Number == 22
non branch instruction to b executed
  %7 = load i32* %1, align 4, !dbg !85

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %7 = load i32* %1, align 4, !dbg !85
operand # : 2 : i32 1
printing instruction:   %8 = add nsw i32 %7, 1, !dbg !85
getOpcode: 8
instruction ==   %8 = add nsw i32 %7, 1, !dbg !85	Line Number == 22
non branch instruction to b executed
  %8 = add nsw i32 %7, 1, !dbg !85

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 %a
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %9 = load i32* %2, align 4, !dbg !85
getOpcode: 27
instruction ==   %9 = load i32* %2, align 4, !dbg !85	Line Number == 22
non branch instruction to b executed
  %9 = load i32* %2, align 4, !dbg !85

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)

<<<<<<< HEAD
=======
 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %8 = add nsw i32 %7, 1, !dbg !85
operand # : 2 :   %9 = load i32* %2, align 4, !dbg !85
printing instruction:   %10 = icmp sgt i32 %8, %9, !dbg !85
getOpcode: 46
instruction ==   %10 = icmp sgt i32 %8, %9, !dbg !85	Line Number == 22
non branch instruction to b executed
  %10 = icmp sgt i32 %8, %9, !dbg !85

 executing :icmp instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b

operand0 ==   %8 = add nsw i32 %7, 1, !dbg !85
operand1 ==   %9 = load i32* %2, align 4, !dbg !85
=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing ICmp 
operand0 ==   %8 = add nsw i32 %7, 1, !dbg !21
operand1 ==   %9 = load i32* %2, align 4, !dbg !21
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs == (i32 %a+i32 1)
rhs == i32 %b
state updated
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %10 = icmp sgt i32 %8, %9, !dbg !85
operand # : 2 : 
; <label>:14                                      ; preds = %6
  %15 = load i32* %1, align 4, !dbg !89
  %16 = add nsw i32 %15, 1, !dbg !89
  %17 = load i32* %2, align 4, !dbg !89
  %18 = add nsw i32 %17, 2, !dbg !89
  %19 = call i32 @_Z8notmain2ii(i32 %16, i32 %18), !dbg !89
  store i32 %19, i32* %2, align 4, !dbg !89
  %20 = load i32* %2, align 4, !dbg !91
  %21 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* @_ZSt4cout, i32 %20), !dbg !91
  br label %22

operand # : 3 : 
; <label>:11                                      ; preds = %6
  %12 = load i32* %2, align 4, !dbg !88
  %13 = add nsw i32 %12, 1, !dbg !88
  store i32 %13, i32* %2, align 4, !dbg !88
  br label %22, !dbg !88

printing instruction:   br i1 %10, label %11, label %14, !dbg !85
getOpcode: 2
instruction ==   br i1 %10, label %11, label %14, !dbg !85	Line Number == 22
Split Point Hit!
ADDING CONDITION : ((i32 %a+i32 1)>i32 %b)
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 9 instructions
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %15 = load i32* %1, align 4, !dbg !89
getOpcode: 27
instruction ==   %15 = load i32* %1, align 4, !dbg !89	Line Number == 26
non branch instruction to b executed
  %15 = load i32* %1, align 4, !dbg !89

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %15 = load i32* %1, align 4, !dbg !89
operand # : 2 : i32 1
printing instruction:   %16 = add nsw i32 %15, 1, !dbg !89
getOpcode: 8
instruction ==   %16 = add nsw i32 %15, 1, !dbg !89	Line Number == 26
non branch instruction to b executed
  %16 = add nsw i32 %15, 1, !dbg !89

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %1, align 4, !dbg !89	 == 	i32 %a

lhs not NULL
rhs not NULL
lhs: i32 %a
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %17 = load i32* %2, align 4, !dbg !89
getOpcode: 27
instruction ==   %17 = load i32* %2, align 4, !dbg !89	Line Number == 26
non branch instruction to b executed
  %17 = load i32* %2, align 4, !dbg !89

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %1, align 4, !dbg !89	 == 	i32 %a
  %16 = add nsw i32 %15, 1, !dbg !89	 == 	(i32 %a+i32 1)

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %17 = load i32* %2, align 4, !dbg !89
operand # : 2 : i32 2
printing instruction:   %18 = add nsw i32 %17, 2, !dbg !89
getOpcode: 8
instruction ==   %18 = add nsw i32 %17, 2, !dbg !89	Line Number == 26
non branch instruction to b executed
  %18 = add nsw i32 %17, 2, !dbg !89

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %1, align 4, !dbg !89	 == 	i32 %a
  %16 = add nsw i32 %15, 1, !dbg !89	 == 	(i32 %a+i32 1)
  %17 = load i32* %2, align 4, !dbg !89	 == 	i32 %b

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 %b
rhs: i32 2
exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 :   %16 = add nsw i32 %15, 1, !dbg !89
operand # : 2 :   %18 = add nsw i32 %17, 2, !dbg !89
operand # : 3 : 
; Function Attrs: nounwind uwtable
define i32 @_Z8notmain2ii(i32 %c, i32 %d) #2 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %c, i32* %1, align 4
  call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80
  store i32 %d, i32* %2, align 4
  call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82
  %3 = load i32* %1, align 4, !dbg !83
  %4 = load i32* %2, align 4, !dbg !83
  %5 = add nsw i32 %3, %4, !dbg !83
  ret i32 %5, !dbg !83
}

printing instruction:   %19 = call i32 @_Z8notmain2ii(i32 %16, i32 %18), !dbg !89
getOpcode: 49
instruction ==   %19 = call i32 @_Z8notmain2ii(i32 %16, i32 %18), !dbg !89	Line Number == 26
Split Point Hit!
INTERNAL CALL

; Function Attrs: nounwind uwtable
define i32 @_Z8notmain2ii(i32 %c, i32 %d) #2 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %c, i32* %1, align 4
  call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80
  store i32 %d, i32* %2, align 4
  call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82
  %3 = load i32* %1, align 4, !dbg !83
  %4 = load i32* %2, align 4, !dbg !83
  %5 = add nsw i32 %3, %4, !dbg !83
  ret i32 %5, !dbg !83
}
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 10 instructions
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %1 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %1 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : i32 1
printing instruction:   %2 = alloca i32, align 4
getOpcode: 26
non branch instruction to b executed
  %2 = alloca i32, align 4

 executing :alloca instruction 
State at this point == 
------------------i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 %c
operand # : 2 :   %1 = alloca i32, align 4
printing instruction:   store i32 %c, i32* %1, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %c, i32* %1, align 4

 executing :store instruction 
State at this point == 
------------------i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 : !{i32* %1}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"c", metadata <badref>, i32 16777257, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [c] [line 41]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80	Line Number == 41
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %1}, metadata !79), !dbg !80

 executing :call instruction 
State at this point == 
------------------  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 : i32 %d
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %d, i32* %2, align 4
getOpcode: 28
non branch instruction to b executed
  store i32 %d, i32* %2, align 4

 executing :store instruction 
State at this point == 
<<<<<<< HEAD
------------------  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 : !{i32* %2}

operand # : 2 : !{i32 786689, metadata <badref>, metadata !"d", metadata <badref>, i32 33554473, metadata <badref>, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [d] [line 41]

operand # : 3 : 
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata) #3

printing instruction:   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82
getOpcode: 49
instruction ==   call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82	Line Number == 41
non branch instruction to b executed
  call void @llvm.dbg.declare(metadata !{i32* %2}, metadata !81), !dbg !82

 executing :call instruction 
State at this point == 
------------------  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	(i32 %b+i32 2)
i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

=======
------------------  %10 = icmp sgt i32 %8, %9, !dbg !21	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %2, align 4, !dbg !25	 == 	i32 %b
  %16 = add nsw i32 %15, 2, !dbg !25	 == 	(i32 %b+i32 2)
i32 %a	 == 	i32 %a
i32 %b	 == 	i32 %b
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %1 = alloca i32, align 4
printing instruction:   %3 = load i32* %1, align 4, !dbg !83
getOpcode: 27
instruction ==   %3 = load i32* %1, align 4, !dbg !83	Line Number == 43
non branch instruction to b executed
  %3 = load i32* %1, align 4, !dbg !83

 executing :load instruction 
State at this point == 
------------------  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	(i32 %b+i32 2)
i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %4 = load i32* %2, align 4, !dbg !83
getOpcode: 27
instruction ==   %4 = load i32* %2, align 4, !dbg !83	Line Number == 43
non branch instruction to b executed
  %4 = load i32* %2, align 4, !dbg !83

 executing :load instruction 
State at this point == 
------------------  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	(i32 %b+i32 2)
  %3 = load i32* %1, align 4, !dbg !83	 == 	(i32 %a+i32 1)
i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %3 = load i32* %1, align 4, !dbg !83
operand # : 2 :   %4 = load i32* %2, align 4, !dbg !83
printing instruction:   %5 = add nsw i32 %3, %4, !dbg !83
getOpcode: 8
instruction ==   %5 = add nsw i32 %3, %4, !dbg !83	Line Number == 43
non branch instruction to b executed
  %5 = add nsw i32 %3, %4, !dbg !83

 executing :add instruction 
State at this point == 
------------------  %1 = alloca i32, align 4	 == 	(i32 %a+i32 1)
  %2 = alloca i32, align 4	 == 	(i32 %b+i32 2)
  %3 = load i32* %1, align 4, !dbg !83	 == 	(i32 %a+i32 1)
  %4 = load i32* %2, align 4, !dbg !83	 == 	(i32 %b+i32 2)
i32 %d	 == 	(i32 %b+i32 2)
i32 %c	 == 	(i32 %a+i32 1)

lhs not NULL
rhs not NULL
lhs: (i32 %a+i32 1)
rhs: (i32 %b+i32 2)
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %5 = add nsw i32 %3, %4, !dbg !83
printing instruction:   ret i32 %5, !dbg !83
getOpcode: 1
instruction ==   ret i32 %5, !dbg !83	Line Number == 43
Split Point Hit!
exiting getNextBlocks
size of deque : 2
Basic block (name= ) has 9 instructions
printing operands : 2
operand # : 1 :   %19 = call i32 @_Z8notmain2ii(i32 %16, i32 %18), !dbg !89
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %19, i32* %2, align 4, !dbg !89
getOpcode: 28
instruction ==   store i32 %19, i32* %2, align 4, !dbg !89	Line Number == 26
non branch instruction to b executed
  store i32 %19, i32* %2, align 4, !dbg !89

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %1, align 4, !dbg !89	 == 	i32 %a
  %16 = add nsw i32 %15, 1, !dbg !89	 == 	(i32 %a+i32 1)
  %17 = load i32* %2, align 4, !dbg !89	 == 	i32 %b
  %18 = add nsw i32 %17, 2, !dbg !89	 == 	(i32 %b+i32 2)
  %19 = call i32 @_Z8notmain2ii(i32 %16, i32 %18), !dbg !89	 == 	((i32 %a+i32 1)+(i32 %b+i32 2))

exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %20 = load i32* %2, align 4, !dbg !91
getOpcode: 27
instruction ==   %20 = load i32* %2, align 4, !dbg !91	Line Number == 27
non branch instruction to b executed
  %20 = load i32* %2, align 4, !dbg !91

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	((i32 %a+i32 1)+(i32 %b+i32 2))
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)
  %15 = load i32* %1, align 4, !dbg !89	 == 	i32 %a
  %16 = add nsw i32 %15, 1, !dbg !89	 == 	(i32 %a+i32 1)
  %17 = load i32* %2, align 4, !dbg !89	 == 	i32 %b
  %18 = add nsw i32 %17, 2, !dbg !89	 == 	(i32 %b+i32 2)
  %19 = call i32 @_Z8notmain2ii(i32 %16, i32 %18), !dbg !89	 == 	((i32 %a+i32 1)+(i32 %b+i32 2))

exiting executeNonBranchingInstruction
printing operands : 3
operand # : 1 : @_ZSt4cout = external global %"class.std::basic_ostream"
operand # : 2 :   %20 = load i32* %2, align 4, !dbg !91
operand # : 3 : 
declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) #0

printing instruction:   %21 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* @_ZSt4cout, i32 %20), !dbg !91
getOpcode: 49
instruction ==   %21 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* @_ZSt4cout, i32 %20), !dbg !91	Line Number == 27
Split Point Hit!
EXTERNAL CALL
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 4 instructions
printing operands : 1
operand # : 1 :   %2 = alloca i32, align 4
printing instruction:   %12 = load i32* %2, align 4, !dbg !88
getOpcode: 27
instruction ==   %12 = load i32* %2, align 4, !dbg !88	Line Number == 23
non branch instruction to b executed
  %12 = load i32* %2, align 4, !dbg !88

 executing :load instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Load 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %12 = load i32* %2, align 4, !dbg !88
operand # : 2 : i32 1
printing instruction:   %13 = add nsw i32 %12, 1, !dbg !88
getOpcode: 8
instruction ==   %13 = add nsw i32 %12, 1, !dbg !88	Line Number == 23
non branch instruction to b executed
  %13 = add nsw i32 %12, 1, !dbg !88

 executing :add instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)
  %12 = load i32* %2, align 4, !dbg !88	 == 	i32 %b

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Add 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
lhs not NULL
rhs not NULL
lhs: i32 %b
rhs: i32 1
exiting executeNonBranchingInstruction
printing operands : 2
operand # : 1 :   %13 = add nsw i32 %12, 1, !dbg !88
operand # : 2 :   %2 = alloca i32, align 4
printing instruction:   store i32 %13, i32* %2, align 4, !dbg !88
getOpcode: 28
instruction ==   store i32 %13, i32* %2, align 4, !dbg !88	Line Number == 23
non branch instruction to b executed
  store i32 %13, i32* %2, align 4, !dbg !88

 executing :store instruction 
State at this point == 
------------------i32 %b	 == 	i32 %b
i32 %a	 == 	i32 %a
  %1 = alloca i32, align 4	 == 	i32 %a
  %2 = alloca i32, align 4	 == 	i32 %b
<<<<<<< HEAD
  %3 = load i32* %1, align 4, !dbg !83	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !83	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !83	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !85	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !85	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !85	 == 	i32 %b
  %10 = icmp sgt i32 %8, %9, !dbg !85	 == 	((i32 %a+i32 1)>i32 %b)
  %12 = load i32* %2, align 4, !dbg !88	 == 	i32 %b
  %13 = add nsw i32 %12, 1, !dbg !88	 == 	(i32 %b+i32 1)

=======
  %3 = load i32* %1, align 4, !dbg !19	 == 	i32 %a
  %4 = load i32* %2, align 4, !dbg !19	 == 	i32 %b
  %5 = icmp sgt i32 %3, %4, !dbg !19	 == 	(i32 %a>i32 %b)
  %7 = load i32* %1, align 4, !dbg !21	 == 	i32 %a
  %8 = add nsw i32 %7, 1, !dbg !21	 == 	(i32 %a+i32 1)
  %9 = load i32* %2, align 4, !dbg !21	 == 	i32 %b

 user variables: 
a	 == 	i32 %a
b	 == 	i32 %b

executing Store 
>>>>>>> b266aaa7905e35a212cd94d2c89f50622e3e0497
exiting executeNonBranchingInstruction
printing operands : 1
operand # : 1 : 
; <label>:22                                      ; preds = %14, %11
  br label %35, !dbg !92

printing instruction:   br label %22, !dbg !88
getOpcode: 2
instruction ==   br label %22, !dbg !88	Line Number == 23
Split Point Hit!
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 1 instructions
printing operands : 1
operand # : 1 : 
; <label>:35                                      ; preds = %32, %22
  ret void, !dbg !105

printing instruction:   br label %35, !dbg !92
getOpcode: 2
instruction ==   br label %35, !dbg !92	Line Number == 29
Split Point Hit!
exiting getNextBlocks
size of deque : 1
Basic block (name= ) has 1 instructions
printing operands : 0
printing instruction:   ret void, !dbg !105
getOpcode: 1
instruction ==   ret void, !dbg !105	Line Number == 40
Split Point Hit!
exiting getNextBlocks
size of deque : 0
proceed? 
prevId : 